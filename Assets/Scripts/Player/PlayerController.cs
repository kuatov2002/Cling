using UnityEngine;

[RequireComponent(typeof(Rigidbody))]
public class PlayerMovement : MonoBehaviour
{
    [SerializeField] private float moveSpeed = 5f;
    [SerializeField] private float jumpForce = 5f;
    [SerializeField] private LayerMask groundLayer;

    private Rigidbody rb;
    private bool isGrounded;

    private void Awake()
    {
        rb = GetComponent<Rigidbody>();
        rb.freezeRotation = true;
        rb.linearDamping = 5f; // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    }

    private void Update()
    {
        if (Input.GetButtonDown("Jump") && isGrounded)
        {
            rb.linearVelocity = new Vector3(rb.linearVelocity.x, 0f, rb.linearVelocity.z); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
            isGrounded = false;
        }
    }

    private void FixedUpdate()
    {
        float horizontal = Input.GetAxisRaw("Horizontal");
        float vertical = Input.GetAxisRaw("Vertical");

        Vector3 movement = new Vector3(horizontal, 0f, vertical).normalized;

        // üîÅ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–≥—Ä–æ–∫–∞
        movement = transform.TransformDirection(movement);

        // –ü—Ä—è–º–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é —Å —É—á—ë—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        Vector3 targetVelocity = movement * moveSpeed;
        rb.linearVelocity = new Vector3(targetVelocity.x, rb.linearVelocity.y, targetVelocity.z);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–µ–º–ª–µ
        isGrounded = Physics.Raycast(transform.position, Vector3.down, 0.6f, groundLayer);
    }
}