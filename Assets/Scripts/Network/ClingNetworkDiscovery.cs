using System;
using System.Net;
using UnityEngine;
using Mirror;
using Mirror.Discovery;

    // –ö–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –ø–æ–ª—è —Å—é–¥–∞! üì§
    [Serializable]
    public struct CustomServerRequest : NetworkMessage
    {
        // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        public string playerName;
        
        // –í–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
        public int maxPlayers;
    }

    // –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç - –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –ø–æ–ª—è —Å—é–¥–∞! üì•
    [Serializable]
    public struct CustomServerResponse : NetworkMessage
    {
        // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è Mirror
        public long serverId;
        public Uri uri;
    
        // ‚úÖ –ó–∞–º–µ–Ω—è–µ–º IPEndPoint –Ω–∞ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –ø–æ–ª—è
        public string endPointAddress;
        public int endPointPort;
    
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        public string serverName;
        public string hostPlayerName;
    
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        public int currentPlayers;
        public int maxPlayers;
    
        public float serverUptime;
        public int ping;
    
        // üõ†Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IPEndPoint
        public IPEndPoint EndPoint
        {
            get
            {
                if (string.IsNullOrEmpty(endPointAddress))
                    return null;
            
                return new IPEndPoint(IPAddress.Parse(endPointAddress), endPointPort);
            }
            set
            {
                if (value != null)
                {
                    endPointAddress = value.Address.ToString();
                    endPointPort = value.Port;
                }
                else
                {
                    endPointAddress = string.Empty;
                    endPointPort = 0;
                }
            }
        }
    }

    [Serializable]
    public class CustomServerFoundEvent : UnityEngine.Events.UnityEvent<CustomServerResponse> { }

    [DisallowMultipleComponent]
    [AddComponentMenu("Network/Custom Network Discovery")]
    public class ClingNetworkDiscovery : NetworkDiscoveryBase<CustomServerRequest, CustomServerResponse>
    {
        [Header("Server Configuration üéÆ")]
        [SerializeField] private string serverName = "My Awesome Server";
        [SerializeField] private string hostPlayerName = "Host";
        [SerializeField] private int maxPlayers = 7;

        [Header("Client Configuration üì±")]
        [SerializeField] private string playerName = "Player";

        [Header("Events üîî")]
        public CustomServerFoundEvent OnCustomServerFound = new CustomServerFoundEvent();

        private DateTime serverStartTime;
        private int currentPlayers = 0;

        public override void Start()
        {
            base.Start();
            serverStartTime = DateTime.Now;
        }

        #region Server Side üñ•Ô∏è

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        /// –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º! üîç
        /// </summary>
        protected override CustomServerResponse ProcessRequest(CustomServerRequest request, IPEndPoint endpoint)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
                currentPlayers = NetworkManager.singleton ? NetworkManager.singleton.numPlayers : 0;

                // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ
                var response = new CustomServerResponse
                {
                    // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è Mirror
                    serverId = ServerId,
                    uri = transport.ServerUri(),
                    
                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
                    serverName = serverName,
                    hostPlayerName = hostPlayerName,
                    
                    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                    currentPlayers = currentPlayers,
                    maxPlayers = maxPlayers,
                    
                    serverUptime = (float)(DateTime.Now - serverStartTime).TotalMinutes,
                    ping = 0 // –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
                };

                Debug.Log($"üì° Responding to discovery request from {request.playerName}");
                return response;
            }
            catch (NotImplementedException)
            {
                Debug.LogError($"Transport {transport} does not support network discovery");
                throw;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º
        /// –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–≤–æ—é –ª–æ–≥–∏–∫—É –∑–¥–µ—Å—å! üéØ
        /// </summary>
        private int GetCurrentGameMode()
        {
            // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
            return 1; // –ù–∞–ø—Ä–∏–º–µ—Ä: 1 = Deathmatch, 2 = Capture the Flag, etc.
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç
        /// </summary>
        private string[] GetAvailableMaps()
        {
            // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç
            return new string[] { "Map1", "Map2", "Map3" };
        }

        #endregion

        #region Client Side üì±

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        /// –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–¥–µ—Å—å –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å! üì§
        /// </summary>
        protected override CustomServerRequest GetRequest()
        {
            return new CustomServerRequest
            {
                // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                playerName = playerName,
                
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                maxPlayers = maxPlayers,
            };
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        /// –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º! üîç
        /// </summary>
        protected override void ProcessResponse(CustomServerResponse response, IPEndPoint endpoint)
        {
            // ‚úÖ –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º endpoint —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–æ
            response.EndPoint = endpoint;

            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URI –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (response.uri != null)
            {
                UriBuilder realUri = new UriBuilder(response.uri)
                {
                    Host = endpoint.Address.ToString()
                };
                response.uri = realUri.Uri;
            }

            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–∏–Ω–≥
            response.ping = CalculatePing(endpoint);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–ª–∏–µ–Ω—Ç–∞
            if (ShouldAcceptServer(response))
            {
                Debug.Log($"üéÆ Found server: {response.serverName} ({response.currentPlayers}/{response.maxPlayers})");
        
                // –í—ã–∑—ã–≤–∞–µ–º –æ–±–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                OnServerFound?.Invoke(response);
                OnCustomServerFound?.Invoke(response);
            }
            else
            {
                Debug.Log($"‚ö†Ô∏è Server {response.serverName} filtered out");
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        /// </summary>
        private bool ShouldAcceptServer(CustomServerResponse response)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
            if (response.currentPlayers >= response.maxPlayers)
                return false;

            return true;
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–∏–Ω–≥–∞
        /// </summary>
        private int CalculatePing(IPEndPoint endpoint)
        {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–∏–Ω–≥-—Ç–µ—Å—Ç
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return UnityEngine.Random.Range(20, 150);
        }

        #endregion

        #region Public API üõ†Ô∏è

        /// <summary>
        /// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        /// </summary>
        public void UpdateServerInfo(string newServerName, int newMaxPlayers)
        {
            serverName = newServerName;
            maxPlayers = newMaxPlayers;
            
            Debug.Log($"üìù Server info updated: {serverName} (max: {maxPlayers})");
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        /// </summary>
        public void UpdateClientInfo(string newPlayerName)
        {
            playerName = newPlayerName;
            
            Debug.Log($"üìù Client info updated: {playerName}");
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ (–¥–ª—è UI)
        /// </summary>
        public void RefreshServerList()
        {
            if (enableActiveDiscovery)
            {
                StopDiscovery();
                StartDiscovery();
                Debug.Log("üîÑ Refreshing server list...");
            }
        }

        #endregion
    }
